'use strict';

var loopback = require('loopback');
var boot = require('loopback-boot');

var app = module.exports = loopback();

app.start = function() {
  // start the web server
  return app.listen(function() {
    app.emit('started');
    var baseUrl = app.get('url').replace(/\/$/, '');
    console.log('Web server listening at: %s', baseUrl);
    if (app.get('loopback-component-explorer')) {
      var explorerPath = app.get('loopback-component-explorer').mountPath;
      console.log('Browse your REST API at %s%s', baseUrl, explorerPath);
    }
  });
};

// when the server is executed by webpack or via `$ node main.js` (when built)
// the boot instructions are provided by a virtual module generated by webpack (`boot-instructions.json`)
// and the http server itself is started
//   - see backpack.config.js
//   - partially copied from https://github.com/zamb3zi/loopback-webpack-example
if (require.main === module) {
  var bootInstructions = require('./boot-instructions.json');
  var execute = require('loopback-boot/lib/executor');
  execute(app, bootInstructions, function(err) {
    if (err) {
      console.error(`Boot error: ${err}`);
      throw err;
    }

    app.start();
  });
// when the server is being required (i.e. by a standalone external script)
// the app is left to boot normally without the http server being started
// (allowing 'looback-boot' to read and compile the boot instructions from the fs)
} else {
  boot(app, __dirname, function(err) {
    if (err) throw err;
  });
}
